#	Example:
# 
#	example_effect = {
#		add_political_power = 66
#		add_popularity = {
#			ideology = fascism
#			popularity = 0.33
#		}
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

#####################################
### emergency_factory_conversion ####
#####################################

#This is going to give misleading and ugly tooltips. Making it nice will take effort. TODO_WTT_CD make nice or ignore and remove comment. Easiest solution is just making a custom tooltip that says "5 civilian factories will be converted to military factories" and ignore telling the player the states where it will happen.

replace_civ_with_arms_factories = {	

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}
	
	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}
}

#Country scope
ROOT_inherit_current_scope_wars_effect = {
	custom_effect_tooltip = ROOT_inherit_current_scope_wars_effect
	hidden_effect = {	
		every_country = {
			limit = {
				has_defensive_war_with = PREV
			}
			ROOT = { declare_war_on = { target = PREV type = annex_everything } }
		}
		every_country = {
			limit = {
				has_offensive_war_with = PREV
			}
			declare_war_on = { target = ROOT type = annex_everything }
		}
	}
}

get_best_alliance_match_fascism_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = fascism
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {
				
				is_faction_leader = yes
				is_major = yes
				has_government = fascism
				not = { has_war_with = ROOT }
				
				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { this.leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { this.leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < this.leader_score }
					}
					set_temp_variable = { ROOT.best_leader = this }
					set_temp_variable = { ROOT.best_leader_score = this.leader_score }
				}
			}
		}
	}		
}

get_best_alliance_match_communism_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = communism
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = communism
				not = { has_war_with = ROOT }
				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < leader_score }
						set_temp_variable = { ROOT.best_leader = this }
						set_temp_variable = { ROOT.best_leader_score = leader_score }
					}
				}
			}
		}
	}		
}

civil_war_anti_exploiter_punitive_action = {
	# Anti-exploiter punitive brigades! BET YA DIDN'T SEE THAT COMING DID YA?!
	if = {
		limit = {
			has_army_size = {
			    size < 1
			}
		}
		division_template = {
			name = "Anti-Exploit Punitive Brigade"
			priority = 1
			# division_names_group = ENG_MAR_01
			is_locked = yes
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }
	
		   	   	infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }
	
		   	   	infantry = { x = 2 y = 0 }
				artillery_brigade = { x = 2 y = 1 }
				artillery_brigade = { x = 2 y = 2 }
			}
			support = {
				engineer = { x = 0 y = 0 }
				recon = { x = 0 y = 1 }
				artillery = { x = 0 y = 2 }
			}
		}
		random_state = {
			limit = {
				is_capital = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
	}
}

clear_sabotaged_resources_if_necesary = {
	if = {
		limit = {
			not = {
				has_dynamic_modifier = {
					modifier = sabotaged_resources
				}
			}
		}
		
		clear_variable = sabotaged_oil
		clear_variable = sabotaged_aluminium
		clear_variable = sabotaged_rubber
		clear_variable = sabotaged_tungsten
		clear_variable = sabotaged_steel
		clear_variable = sabotaged_chromium
	}
}

remove_from_allowed_party = {
	if = {
		limit = { has_government = democratic }
		set_temp_variable = { allowed_party_democratic = 0 }
	}
	else_if = {
		limit = { has_government = fascism }
		set_temp_variable = { allowed_party_fascism = 0 }
	}
	else_if = {
		limit = { has_government = communism }
		set_temp_variable = { allowed_party_communism = 0 }
	}
	else_if = {
		limit = { has_government = neutrality }
		set_temp_variable = { allowed_party_neutrality = 0 }
	}
}

###Added
#Should remove any and all fascist foreign influence, to be updated
remove_fascist_spirits_effect = {
	if = {
		limit = { has_idea = fascist_influence }
		remove_ideas = fascist_influence
	}
	if = {
		limit = { has_idea = american_influence_drift_fascism }
		remove_ideas = american_influence_drift_fascism
	}
	if = {
		limit = { has_idea = GER_align_hungary }
		remove_ideas = GER_align_hungary
	}
	if = {
		limit = { has_idea = GER_align_romania }
		remove_ideas = GER_align_romania
	}
}

#Should remove any and all communist foreign influence
remove_communist_spirits_effect = {
	if = {
		limit = { has_idea = american_influence_drift_communism }
		remove_ideas = american_influence_drift_communism
	}
	if = {
		limit = { has_idea = comintern_influence }
		remove_ideas = comintern_influence
	}
	if = {
		limit = { has_idea = pan_slavic_propaganda }
		remove_ideas = pan_slavic_propaganda
	}
	if = {
		limit = { has_idea = agitated_peasants }
		remove_ideas = agitated_peasants
	}
	if = {
		limit = { has_idea = armed_communist_militants }
		remove_ideas = armed_communist_militants
	}
	if = {
		limit = { has_idea = BALTIC_communist_propaganda }
		remove_ideas = BALTIC_communist_propaganda
	}
	if = { 
		limit = { has_idea = BALTIC_communist_militancy }
		remove_ideas = BALTIC_communist_militancy
	}
}
#Should remove any and all democratic foreign influence
remove_democratic_spirits_effect = {
	if = {
		limit = { has_idea = democratic_influence }
		remove_ideas = democratic_influence
	}
}
abandon_colony_tag = {
	drop_cosmetic_tag = yes
}
#Upgrades state cat to the next valid level. Called from state scope
increase_state_category = {
	if = {
		limit = {
			has_state_category = tiny_island
		}
		set_state_category = small_island
		effect_tooltip = {
			add_extra_state_shared_building_slots = 1
		}
	}

	if = {
		limit = {
			OR = {
				has_state_category = wasteland
				has_state_category = enclave
			}
		}
		set_state_category = pastoral
		effect_tooltip = {
			add_extra_state_shared_building_slots = 1
		}
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = rural
		effect_tooltip = {
			add_extra_state_shared_building_slots = 1
		}
	}
	else_if = {
		limit = {
			has_state_category = rural
		}
		set_state_category = town
		effect_tooltip = {
			add_extra_state_shared_building_slots = 2
		}
	}
	else_if = {
		limit = {
			has_state_category = town
		}
		set_state_category = large_town
		effect_tooltip = {
			add_extra_state_shared_building_slots = 1
		}
	}
	else_if = {
		limit = {
			has_state_category = large_town
		}
		set_state_category = city
		effect_tooltip = {
			add_extra_state_shared_building_slots = 1
		}
	}
	else_if = {
		limit = {
			has_state_category = city
		}
		set_state_category = metropolis
		effect_tooltip = {
			add_extra_state_shared_building_slots = 4
		}
	}

	else_if = {
		limit = {
			has_state_category = metropolis
		} 
		set_state_category = megalopolis
		effect_tooltip = {
			add_extra_state_shared_building_slots = 2
		}
	}
}

add_potential_special_forces_tree = {
	custom_effect_tooltip = add_potential_special_forces_tree_tt
	if = {
		limit = { NOT = { has_variable = sf_trees } }
		set_variable = { sf_trees = 2 }
	}
	else = {
		add_to_variable = { sf_trees = 1 }
	}
}

remove_potential_special_forces_tree = {
	if = {
		limit = { NOT = { has_variable = sf_trees } }
		set_variable = { sf_trees = 0 }
	}
	else = {
		subtract_from_variable = { sf_trees = 1 }
	}
}

store_core_states_on_game_start = { #Should be called from history file
	every_core_state = {
		ROOT = {
			add_to_array = {
				array = core_states_at_game_start
				value = PREV
			}
		}
	}
}

on_daily = {

}
